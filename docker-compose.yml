version: '3.7'

services:
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: webshop-server
    container_name: webshop-node-server
    volumes:
      - ./server/:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "8080:8080"
    depends_on:
      - mongo
    environment:
      - NODE_ENV=development
    networks:
      - app-network
  mongo:
    image: mongo
    volumes:
      - data-volume:/data/WebShop
    ports:
      - "27017:27017"
    networks:
      - app-network
  mongo-seed:
    build:
      context: ./server/databaseSeed
      dockerfile: Dockerfile
    links:
      - mongo
    networks:
      - app-network
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    image: webshop-client
    container_name: webshop-react-client
    command: npm start
    volumes:
      - ./client/:/usr/app
      - /usr/app/node_modules
    depends_on:
      - server
    ports:
      - "3000:3000"
    networks:
      - app-network
  prometheus:
    container_name: prometheus-svc
    image: prom/prometheus
    ports: 
        - "9091:9090"
    command: --config.file=/etc/prometheus/prometheus.yaml
    volumes:
        - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    networks:
        - app-network
  grafana:
    image: grafana/grafana:5.0.4
    ports:
        - "5000:5000"
    environment:
        - GF_AUTH_BASIC_ENABLED=false
        - GF_AUTH_ANONYMOUS_ENABLED=true
        - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    networks:
        - app-network
  grafana-dashboards:
    image: alpine:3.10
    depends_on:
        - grafana
    volumes:
        - ./grafana-data:/grafana
    command: >
        /bin/sh -c "
        apk add --no-cache curl
        echo 'waiting for grafana'
        sleep 5s
        cd /grafana
        curl --request POST http://grafana:3000/api/datasources --header 'Content-Type: application/json' -d @datasources.json
        curl --request POST http://grafana:3000/api/dashboards/db --header 'Content-Type: application/json' -d @dashboard.json"
    networks:
        - app-network
  
networks:
    app-network:
        driver: bridge

volumes:
    data-volume:
    node_modules:
    web-root:
      driver: local